declare type Fetch = typeof globalThis.fetch;
declare type RequestInfo = globalThis.RequestInfo;
declare type RequestInit = globalThis.RequestInit;
declare type Response = globalThis.Response;

interface CreateFetchOptions {
    fetch: Fetch;
}
declare type FetchRequest = RequestInfo;
interface SearchParams {
    [key: string]: any;
}
interface FetchOptions extends Omit<RequestInit, 'body'> {
    baseURL?: string;
    body?: RequestInit['body'] | Record<string, any>;
    params?: SearchParams;
    response?: boolean;
}
interface FetchResponse<T> extends Response {
    data?: T;
}
interface $Fetch {
    <T = any>(request: FetchRequest, opts?: FetchOptions): Promise<T>;
    raw<T = any>(request: FetchRequest, opts?: FetchOptions): Promise<FetchResponse<T>>;
}
declare function setHeader(options: FetchOptions, _key: string, value: string): void;
declare function createFetch({ fetch }: CreateFetchOptions): $Fetch;

declare class FetchError<T = any> extends Error {
    name: 'FetchError';
    request?: FetchRequest;
    response?: FetchResponse<T>;
    data?: T;
}
declare function createFetchError<T = any>(request: FetchRequest, response: FetchResponse<T>): FetchError<T>;

declare const $fetch: $Fetch;

export { $Fetch, $fetch, CreateFetchOptions, FetchError, FetchOptions, FetchRequest, FetchResponse, SearchParams, createFetch, createFetchError, setHeader };
